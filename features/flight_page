from flask import Flask, requests, jsonify

app = Flask(__name__)

# Example data structures for pilots and flights (change when getting the api points)
pilots = [
    {
        "id": 1,
        "seat": 1,
        "name": "Pilot 1",
        "home_base": "New York",
        "max_flight_hours": 8,
        "available_hours": 6,
        "can_operate_aircraft": ["A320", "B737"],
    },
    {
        "id": 2,
        "seat": 1,
        "name": "Pilot 2",
        "home_base": "New York",
        "max_flight_hours": 8,
        "available_hours": 7,
        "can_operate_aircraft": ["A320", "B737"],
    },
]

flights = [
    {
        "flight_id": 1,
        "pilot_id": 1,
        "aircraft_type": "A320",
        "departure_time": "2023-12-15T10:00:00",
        "home_base": "New York",
    },
    {
        "flight_id": 2,
        "pilot_id": 2,
        "aircraft_type": "B737",
        "departure_time": "2023-12-15T14:00:00",
        "home_base": "New York",
    },
]

# Function to find matching flights for a pilot 
def find_matching_flights(pilot_id):
    pilot = next((p for p in pilots if p["id"] == pilot_id), None)
    if pilot:
        matching_flights = [
            flight for flight in flights
            if (
                flight["home_base"] == pilot["home_base"]
                and flight["departure_time"] >= "2023-12-15T08:00:00"
                and flight["departure_time"] <= "2023-12-15T16:00:00"
                and flight["aircraft_type"] in pilot["can_operate_aircraft"]
            )
        ]
        return matching_flights
    return []

@app.route("/pilots/<int:pilot_id>/matching_flights", methods=["GET"])
def get_matching_flights(pilot_id):
    matching_flights = find_matching_flights(pilot_id)
    return jsonify(matching_flights)

if __name__ == "__main__":
    app.run(debug=True)

'''
its really just a GET the api endpoint that I create and then returning the json file of the different flights onto the page
This is a new feature that is going to be added to the pbs they already have

if the cards parameters matches the user parameters such as the type of aircraft, the hours of time as
long as its within the duration of the hours the pilot has left, 
'''